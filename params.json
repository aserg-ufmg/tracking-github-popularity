{"name":"Tracking-GitHub-popularity","tagline":"Tracking GitHub Popularity","body":"### Introduction\r\n\r\nWe describe a framework for assessing the popularity of open source systems hosted at GitHub. GitHub provides an explicit\r\nfeature for users to manifest their interest or satisfaction with a hosted repository: the stargazers button. Like in social websites, users can like or upvote a repository by clicking in this button. Therefore, we assume in this paper that the number of stars of a repository is a reliable and simple measure of its popularity in GitHub ecosystem. We then make\r\nthree contributions: \r\n\r\n* We propose a criteria to classify popular and very popular systems at GitHub\r\n* We propose four growth patterns to describe the evolution of the number of stars of a system over time \r\n* We check the importance of the stargazers measure, by correlating the number of stars with other measures such as forks\r\nand client usage \r\n\r\nWe illustrate the application of our framework on a snapshot of GitHub, collected on May, 1st, 2015. \r\n\r\n### Measuring Popularity\r\n\r\nWe consider the top-24 programming languages with more repositories in GitHub, which are the languages classified as popular by the GitHub advanced search engine. Figure 1 shows the distribution of the number of stars in the top-1,000 repositories of such languages. JavaScript is the language with the highest number of popular systems; in our sample of\r\n1,000 JavaScript systems, the first quartile (bottom-25%), second quartile (median), and third quartile (top-25%) values are: 1,603, 2,274, and 3,820 stars. The median number of stars of the next five languages are: Ruby (793 stars), Objective-C (766 stars), Python (676 stars), Java (653 stars), and PHP (403 stars). The five languages with the lowest median\r\nnumber of stars are: Haskell (31 stars), Lua (24 stars), ActionScript (20), R (16 stars), and MatLab (4 stars)\r\n\r\nWe consider popular the top-10% systems with more stars in our sample of 24,000 systems, which requires a system to have at least 1,459 stars (on May, 1st, 2015). Table 1 shows the number of popular systems on each language. Furthermore, we call very popular the top-1% systems with more stars, which requires a system to have at least 19,570 stars. Table 1 also shows the number of very popular systems, per programming language. Among these systems, 13 systems are implemented in JavaScript. Therefore, 35% of the popular systems are in JavaScript, while the language has 54% of the very popular ones.\r\nAt the time of our analysis, twbs/bootstrap is the most popular repository, followed by angular/angular.js, and mbostock/d3.\r\n\r\n###Popularity Growth Patterns\r\n\r\nFor evaluating popularity over time, we restrict the analysis to popular systems with at least 52 weeks (one year) in order to include reasonable historical data for evaluation. We also excluded twbs/bootstrap because we could not get all stars obtained by this system in the last 52 weeks. In this way, we study 2,138 popular systems (89% of our initial set of popular systems). For a given system, we define that Rt is its rank in our list of popular systems in the week t in a logarithm scale (base 2). Therefore, log2(1) + 1 ≤ Rt ≤ log2(2, 138) + 1 and 1 ≤ t ≤ 52. The ranks are considered in logarithm scale due to the right-skewed distribution in the number of stars of the the popular systems, as presented in Figure 2. The rank of the most popular system is 1. The earliest week is the week 1 (aka as OLD) and the latest one\r\nis 52 (aka as NEW ). We also define that RT OP and RBOT T OM are respectively the highest (best) and lowest rank (worse) of a system in the interval under analysis.\r\n\r\nWe propose four patterns of popularity growth: Sustainable, Fast, Slow, and Viral. These patterns are described next:\r\n\r\n**Sustainable Growth**: These systems sustained their ranking in the period under analysis, i.e., the number of stars they received in an one-year interval was sufficient to preserve their position in the ranking of popular systems. We use the following relation to express a\r\nsustainable growth:\r\n(RBOT T OM − RT OP ) < 0.25\r\n\r\nIn other words, a system with sustainable growth has minor variations in its rank during\r\nthe period under analysis, inferior to 0.25 points in a logarithmic scale. Table 2 shows the\r\nnumber of systems with a sustainable growth per language. As can be observed, 466 systems\r\n(22%) matched our definition for sustainable growth. Figures 3a to 3c show three examples\r\nof such systems: rails/rails, facebook/Shimmer, and Automattic/socket.io.\r\n\r\n**Fast Growth:** These are trending systems, which gained stars in a quantity that resulted\r\nin a relevant increase in their position in the ranking of popular systems, as captured by the\r\nfollowing relation:\r\n(ROLD − RNOW ) > 1 ∧ (Rt+1 ≤ Rt) in at least 90% of the weeks t\r\nThat is to say, a system with fast growth has now a rank position that is expressively better\r\nthan its position one year ago, as expressed by a difference of at least one point in a\r\nlogarithmic scale. Moreover, in at least 90% of the weeks under analysis the system preserved\r\nor improved its position in the ranking, compared to the previous week. Table 2\r\nshows the number of such systems per language. As can be observed, 100 systems (5%)\r\nmatched our definition for fast growth, including 44 systems in JavaScript and 18 systems\r\nin Java. Figures 3d to 3f show three examples of such systems: angular/angular.js,\r\ndocker/compose, and apache/spark.\r\n\r\n**Slow Growth:** These are systems receiving few stars on each week. As a result, they\r\nexperienced a relevant decrease in their rank position, as represented by the following relation:\r\n(RNOW − ROLD) > 1 ∧ (Rt+1 ≥ Rt) in at least 90% of the weeks t\r\nA system with slow growth has now a ranking that is one logarithmic degree greater than\r\nits ranking one year ago. Moreover, in at least 90% of the weeks under analysis the system\r\npreserved or decreased its position in the ranking, compared to the previous week. Table 2\r\nshows the number of systems with slow growth per language. As presented in this table, 12\r\nsystems (0.5%) matched our definition for this pattern. Figures 3g to 3i show three examples\r\nof such systems: jquery/jquery, jquery-ui-bootstrap/jquery-ui-bootstrap, and\r\ndjango/django-old.\r\n\r\n**Viral Growth:** These systems experience a massive growth in their number of stars in a short period of time. Typically, viral growth results from word-of-mouth propagation in social networks (Twitter, Facebook, etc) or social news sites (Hacker News, Slashdot, Reddit, etc). In this paper, we consider that viral growth happens when a systems receives most of its stars (i.e., > 50%) in a single week. Table 2 also shows the number of popular systems classified as viral. We found 37 viral systems (2%) and JavaScript is the language with the highest number of such systems (13 systems). Figures 3j to 3k show three examples of systems with a viral growth. We can see that they received more than 1,300 stars in a single week, and very few stars (if any) in the other weeks. To illustrate the importance of social sites on viral growth, we checked that a post on Khan/KaTeX (a JavaScript library for TEX math rendering) was heavily commented and upvoted at Hacker News in the week the system experienced the massive peak in the number of stars. facebook/augmented-traffic-control (a\r\nnetwork connection simulator) and github/git-lfs (a tool for managing large files with Git) are other systems that attracted media coverage exactly in the week they received more than 1,800 stars and 1,300 stars, respectively.\r\n\r\n### Correlating Popularity with Forks and Usage\r\n\r\nTo clarify the credibility of the number of stars as measure for a system’s popularity, we investigate the correlation between this measure and two other ones: number of forks and number of clients.\r\n\r\n**Forks:** Figure 4a shows plots correlating a system popularity\r\nand its number of forks. A logarithm scale is used in both axes. The line represents the\r\nidentity relation: below the line are the systems with more stars than forks, and above the\r\nline the opposite. Two facts can be observed in this figure. First, there is a strong positive\r\ncorrelation between stars and forks (Spearman rank correlation coefficient = 0.55). Second,\r\nonly a few systems have more forks than stars. As examples, we have a repository that just\r\nprovides an example for forking a repository on GitHub (octocat/SpoonKnife) and a\r\npopular puzzle game (gabrielecirulli/2048), whose success motivated many forks with\r\nvariations of the original implementation. Since the game can be downloaded directly from\r\nthe web, we hypothesize that it receives most users’s feedback in the web and not on GitHub.\r\n\r\n**Clients:** The number of clients is another clear measure of popularity. However, it is not\r\ntrivial to access the clients of most GitHub applications. For example, mbostock/d3 is a\r\npopular visualization library, which can be imported by any Web page, including public and\r\nprivate ones. Therefore, it is not trivial to search for D3’s clients. For this reason, to correlate\r\nclient usage and stars, we focus on a restricted set of applications, composed by Node.jsbased\r\nlibraries hosted on the NPM registry. Node.js is a popular, runtime environment\r\nfor server-side and networking JavaScript applications. NPM (Node Package Manager) is a\r\ncentralized repository for hosting the production version of JavaScript modules. Although,\r\nNPM can host any JavaScript module, it is the de facto platform for hosting Node.js-based\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}