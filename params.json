{"name":"Tracking-Popularity-GitHub","tagline":"Tracking the Popularity of GitHub Applications","body":"### Introduction\r\n\r\nIn this article we make three contributions: \r\n\r\n* We propose a criteria to classify **popular** and **very popular** systems at GitHub.\r\n* We propose four growth patterns to describe the evolution of the number of stars of a system over time. \r\n* We check the importance of the stargazers measure, by correlating the number of stars with forks and client usage \r\n\r\nWe illustrate the application of our framework on a snapshot of GitHub, collected on May, 1st, 2015. \r\n\r\n### Measuring Popularity\r\n\r\nWe consider the top-24 programming languages with more repositories in GitHub, which are the languages classified as popular by the GitHub advanced search engine. The following figure shows the distribution of the number of stars in the top-1,000 repositories of such languages. \r\n\r\n![](https://github.com/aserg-ufmg/tracking-github-popularity/blob/master/images/languages.png?raw=true)\r\n\r\nJavaScript is the language with the highest number of popular systems; in our sample of 1,000 JavaScript systems, the first quartile (bottom-25%), second quartile (median), and third quartile (top-25%) values are: 1,603, 2,274, and 3,820 stars. The median number of stars of the next five languages are: Ruby (793 stars), Objective-C (766 stars), Python (676 stars), Java (653 stars), and PHP (403 stars). \r\n\r\nWe consider **popular** the top-10% systems with more stars in our sample of 24,000 systems. Furthermore, we call **very popular** the top-1% systems with more stars. The following table shows the number of popular and very popular systems, per programming language. \r\n\r\n![](https://github.com/aserg-ufmg/tracking-github-popularity/blob/master/images/popular.png?raw=true)\r\n\r\n###Popularity Growth Patterns\r\n\r\nFor evaluating popularity over time, we restrict the analysis to popular systems with at least 52 weeks (one year). In this way, we study 2,138 popular systems (89% of our initial set of popular systems). For a given system, we define that _Rt_ is its rank in our list of popular systems in the week _t_ in a logarithm scale (base 2). The ranks are considered in logarithm scale due to the right-skewed distribution in the number of stars of the the popular systems. The rank of the most popular system is 1. The earliest week is the week 1 (aka as _OLD_) and the latest one is 52 (aka as _NEW_). We also define that _R-TOP_ and _R-BOTTOM_ are respectively the highest (best) and lowest rank (worse) of a system in the interval under analysis.\r\n\r\nWe propose four patterns of popularity growth: Sustainable, Fast, Slow, and Viral. These patterns are described next:\r\n\r\n**Sustainable Growth**: These systems sustained their ranking in the period under analysis, i.e., the number of stars they received in an one-year interval was sufficient to preserve their position in the ranking of popular systems. We use the following relation to express a sustainable growth:\r\n\r\n_(R-BOTTOM − R-TOP ) < 0.25_\r\n\r\nThe following figures shows three examples of systems with a sustainable growth in their number of stars.\r\n\r\n![](https://github.com/aserg-ufmg/tracking-github-popularity/blob/master/images/sustainable.png?raw=true)\r\n\r\n**Fast Growth:** These are trending systems, which gained stars in a quantity that resulted in a relevant increase in their position in the ranking of popular systems, as captured by the following relation:\r\n(ROLD − RNOW ) > 1 ∧ (Rt+1 ≤ Rt) in at least 90% of the weeks t\r\n\r\nThe following figures shows three examples of systems with a fast growth in their number of stars.\r\n\r\n![](https://github.com/aserg-ufmg/tracking-github-popularity/blob/master/images/fast.png?raw=true)\r\n\r\n**Slow Growth:** These are systems receiving few stars on each week. As a result, they\r\nexperienced a relevant decrease in their rank position, as represented by the following relation:\r\n(RNOW − ROLD) > 1 ∧ (Rt+1 ≥ Rt) in at least 90% of the weeks t\r\n\r\nThe following figures show three examples of systems with a slow growth in their number of stars.\r\n\r\n![](https://github.com/aserg-ufmg/tracking-github-popularity/blob/master/images/slow.png?raw=true)\r\n\r\n**Viral Growth:** These systems experience a massive growth in their number of stars in a short period of time. Typically, viral growth results from word-of-mouth propagation in social networks (Twitter, Facebook, etc) or social news sites (Hacker News, Slashdot, Reddit, etc). We consider that viral growth happens when a systems receives most of its stars (i.e., > 50%) in a single week. \r\n\r\nThe following figures show three examples of systems with a viral growth in their number of stars.\r\n\r\n![](https://github.com/aserg-ufmg/tracking-github-popularity/blob/master/images/viral.png?raw=true)\r\n\r\nThe following table shows the number of systems with a sustainable, fast, slow, and viral growth per programming language.\r\n\r\n![](https://github.com/aserg-ufmg/tracking-github-popularity/blob/master/images/growthpatterns.png?raw=true)\r\n\r\n### Correlating Popularity with Forks and Usage\r\n\r\nWe also investigate the correlation between the number of starts and two other measures: number of forks and number of clients.\r\n\r\n**Forks:** The following figure shows plots correlating a system popularity and its number of forks. A logarithm scale is used in both axes. The line represents the identity relation: below the line are the systems with more stars than forks, and above the line the opposite. We can see that there is a strong positive correlation between stars and forks (Spearman rank correlation coefficient = 0.55). \r\n\r\n![](https://github.com/aserg-ufmg/tracking-github-popularity/blob/master/images/forks.png?raw=true)\r\n\r\n**Clients:** To correlate client usage and stars, we focus on a restricted set of applications, composed by Node.js based libraries hosted on the NPM registry. We first retrieved the number of dependents of the popular JavaScript applications in our dataset, using the NPM API. We then manually inspected the top-100 applications in terms of dependents to select the\r\nNode.js-based modules. Figure 4b shows a plot correlating the values we found for number of stars and number of dependents.\r\nAs can be visually observed, there is a strong correlation between these two measures, with a Spearman’s rank correlation coefficient of 0.68.\r\n\r\n![](https://github.com/aserg-ufmg/tracking-github-popularity/blob/master/images/clients.png?raw=true)\r\n\r\n###Summing UP\r\n\r\nWe proposed a framework to assess and track the popularity of GitHub systems. Using this\r\nframework we found that:\r\n\r\n* JavaScript monopolizes more than one third of the popular applications on GitHub; the next five languages (Ruby, Objective-C, Python, Java, and PHP) are responsible for another third of the popular applications. \r\n* 21% of the popular systems have a sustainable growth; 5% have a fast growth; and less than 1% have a slow growth. We also found 37 systems with a viral behavior.\r\n* The number of stars of a system tends to correlate not only with the number of forks, but also with its effective usage by other client applications\r\n\r\n###More Info\r\n\r\nHudson Borges, Marco Tulio Valente, Andre Hora, Jailton Coelho. On the Popularity of GitHub Applications: A Preliminary Note. [arXiv:1507.00604](http://arxiv.org/abs/1507.00604)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}